# Import Ghidra's Jython modules
import ghidra
from ghidra.program.model.block import BasicBlockModel
from ghidra.program.util import CodeUnitIterator

def analyze_binary(ghidra_project, binary_file_path):
    # Open the project
    project = ghidra.framework.Application.findProject(ghidra_project)
    
    # Create a new program
    program = ghidra.app.util.bin.BinaryLoader().loadBinary(binary_file_path, None)
    
    # Analyze the program
    analyzer = ghidra.app.analysis.AnalyzerUtils.getAnalysisManager(program)
    analyzer.schedule()
    analyzer.waitForAnalysisToFinish()
    
    # Display some basic information
    print("Binary Name:", program.getExecutablePath())
    print("Language:", program.getLanguage().getLanguageID())
    print("Processor:", program.getLanguage().getProcessor().toString())
    
    # Access basic block information
    basicBlockModel = BasicBlockModel(program)
    entryPoint = program.getFunctionManager().getFunctionAt(program.getMinAddress())
    basicBlocks = basicBlockModel.getBlocks(entryPoint.getEntryPoint())
    
    for block in basicBlocks:
        print("Basic Block:", block)
    
    # Access and print disassembled code
    print("Disassembled Code:")
    codeUnitIterator = CodeUnitIterator(program, program.getMemory().getLoadedAndInitializedAddressSet(), True)
    for codeUnit in codeUnitIterator:
        print(codeUnit.toString())

def main():
    # Replace with the path to your Ghidra project and binary file
    ghidra_project = "/path/to/ghidra/project"
    binary_file_path = "/path/to/binary_file"
    
    analyze_binary(ghidra_project, binary_file_path)

if __name__ == "__main__":
    main()

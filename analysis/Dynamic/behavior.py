import psutil
import time

def monitor_behavior(binary_path):
    """
    Monitor the behavior of a binary by tracking its process and resource usage.
    
    :param binary_path: The path to the binary to monitor.
    """
    try:
        # Start the binary in a new process
        process = psutil.Popen(binary_path)

        print(f"Monitoring process {process.pid} for behavior...")

        # Monitor the process for a specified duration (e.g., 30 seconds)
        time.sleep(30)

        # Get process information and resource usage
        process_info = process.as_dict(attrs=['pid', 'name', 'create_time', 'cmdline'])
        resource_usage = process.cpu_percent(interval=1), process.memory_info()

        # Print the process information and resource usage
        print("Process Information:")
        print(process_info)
        print("Resource Usage (CPU %, Memory):")
        print(resource_usage)

    except psutil.NoSuchProcess as e:
        print(f"Process not found: {str(e)}")
    except Exception as e:
        print(f"An error occurred: {str(e)}")

if __name__ == "__main__":
    binary_path = "path_to_binary_file.exe"  # Replace with the path to the binary file to monitor
    monitor_behavior(binary_path)

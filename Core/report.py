import hashlib
import pefile

def calculate_hash(file_path, hash_algorithm="sha256"):
    """
    Calculate the hash of a file using the specified hash algorithm.

    :param file_path: The path to the file.
    :param hash_algorithm: The hash algorithm to use (default is "sha256").
    :return: The calculated hash.
    """
    try:
        with open(file_path, "rb") as file:
            data = file.read()
            hash_obj = hashlib.new(hash_algorithm)
            hash_obj.update(data)
            file_hash = hash_obj.hexdigest()
            return file_hash

    except Exception as e:
        print(f"An error occurred while calculating the hash: {str(e)}")
        return None

def generate_report(file_path):
    """
    Generate a basic analysis report for a file.

    :param file_path: The path to the file.
    """
    file_hash = calculate_hash(file_path)
    if file_hash:
        pe = pefile.PE(file_path)

        # Basic information about the PE file
        machine = hex(pe.FILE_HEADER.Machine)
        number_of_sections = pe.FILE_HEADER.NumberOfSections
        time_date_stamp = hex(pe.FILE_HEADER.TimeDateStamp)
        characteristics = hex(pe.FILE_HEADER.Characteristics)

        # List of imported functions
        imported_functions = []
        for entry in pe.DIRECTORY_ENTRY_IMPORT:
            for func in entry.imports:
                imported_functions.append(func.name.decode("utf-8"))

        # Generate the report
        report = f"File Path: {file_path}\n"
        report += f"File Hash: {file_hash}\n"
        report += f"Machine: {machine}\n"
        report += f"Number of Sections: {number_of_sections}\n"
        report += f"Time Date Stamp: {time_date_stamp}\n"
        report += f"Characteristics: {characteristics}\n\n"
        report += "Imported Functions:\n"
        report += "\n".join(imported_functions)

        with open("analysis_report.txt", "w") as report_file:
            report_file.write(report)

        print("Analysis report generated as 'analysis_report.txt'.")

if __name__ == "__main__":
    binary_path = "path_to_binary_file.exe"  # Replace with the path to the binary file for analysis
    generate_report(binary_path)
